@page "/CuentaAgregar"
@page "/CuentaAgregar/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Linq
@using System.Threading
@using System.IO;
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.Extensions.Logging;
@using BlazorInputFile;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components;
@inject IJSRuntime JSRuntime

@inject HttpClient http
@inject NavigationManager navegar
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<h3>Agregar nuevo </h3>
<EditForm Model="@cuenta" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <div class="container-fluid">
       
        <div class="form-group row mb-1">
            <label class="col-sm-3">Cliente : </label>
            <div class="col-sm-9">
                @if (ListaAuxiliar != null)
                {

                    <select id="SearchStateClasificacionasasas" value="@cuenta.IDAuxiliar" @onchange="TipoClienteChange" class="form-control">

                        @foreach (var auxiliar in ListaAuxiliar)
                        {
                            <option value="@auxiliar.ID">@auxiliar.NombreCompleto</option>
                        }
                    </select>
                }
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">*Fecha : </label>
            <div class="col-sm-9">
                <InputDate class="form-control" @bind-Value="@cuenta.FechaRegistro"></InputDate>
                <ValidationMessage For="@(()=>cuenta.FechaRegistro)"></ValidationMessage>
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">*Importe : </label>
            <div class="col-sm-9">
                <InputNumber class="form-control" @bind-Value="@cuenta.SaldoInicial"></InputNumber>
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">Concepto : </label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@cuenta.Descripcion"></InputText>
            </div>

        </div>

        <div class="form-group row mb-1">
            <div class=" col-sm-12">
                <button class="btn btn-primary" type="submit">Guardar</button>
                <button type="button" class="btn btn-danger" @onclick="@Salir">Salir</button>

            </div>
        </div>

        @if (displayValidationErrorMessages)
        {
            <div class="col-md-4" style="margin-top:10px">
                <label>Validation Messages: </label>
                <ValidationSummary />
            </div>
        }
    </div>
</EditForm>
@if (displayUserAddedToDB)
{
    <div class="row bg-success text-white" style="margin-top:10px; height:40px">
        <label class="p-2">Guardando en la base de datos... </label>
    </div>
}

@code {
    public string url = "/api/Cuenta";
    public string urlTipo = "/api/TipoDocumento";
    public string urlAuxiliar = "/api/Auxiliar";
    [Parameter] public string InitialText { get; set; } = "Selecciona Tipo";
    [Parameter] public int id { get; set; }
    private ModeloDatos.Cuenta cuenta = new ModeloDatos.Cuenta();
    Data.Respuesta<ModeloDatos.Cuenta> respuesta = new Data.Respuesta<ModeloDatos.Cuenta>();
    bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;

  

    List<Auxiliar> ListaAuxiliar = new List<Auxiliar>();
    Data.Respuesta<List<Auxiliar>> respuestaAuxiliar = new Data.Respuesta<List<Auxiliar>>();

   
   
    async Task Salir()
    {

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Desea Salir?");
        if (confirmed)
        {
            Console.WriteLine("Entro a la condicion salir");
            navegar.NavigateTo("/CuentaView");
        }
        else
        {
            Console.WriteLine("no entro a la condicion");

        }
    }


    private async Task Guardar()
    {


       ;

        Console.WriteLine("Entro al guardar");
        if (id != 0)
        {

            var orespuesta = await http.PutAsJsonAsync<ModeloDatos.Cuenta>(url, cuenta);
            respuesta = orespuesta.Content.ReadFromJsonAsync<Data.Respuesta<ModeloDatos.Cuenta>>().Result;
        }
        else
        {
            cuenta.Estado = "Activo";
            var orespuesta = await http.PostAsJsonAsync<ModeloDatos.Cuenta>(url, cuenta);
            Console.WriteLine("Entro guardar despues");
            respuesta = orespuesta.Content.ReadFromJsonAsync<Data.Respuesta<ModeloDatos.Cuenta>>().Result;

        }

        navegar.NavigateTo("/CuentaView");

    }

    private void HandleValidSubmit(EditContext context)
    {
        displayValidationErrorMessages = false;
        displayUserAddedToDB = true;
        Guardar();
    }
    private void HandleInvalidSubmit(EditContext context)
    {
        displayValidationErrorMessages = true;
        displayUserAddedToDB = false;
    }
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
    }
    void IDisposable.Dispose()
    {
        System.Diagnostics.Debug.WriteLine("Entra a dispose");
        // Unsubscribe from the event when our component is disposed
        navegar.LocationChanged -= LocationChanged; StateHasChanged();
    }

    protected override async Task OnInitializedAsync()

    {
        // Subscribe to the event
        navegar.LocationChanged += LocationChanged;

        cuenta = new Cuenta();

    

        respuestaAuxiliar = await http.GetFromJsonAsync<Data.Respuesta<List<Auxiliar>>>(urlAuxiliar);
        ListaAuxiliar = respuestaAuxiliar.Data;
        cuenta.IDAuxiliar = ListaAuxiliar.FirstOrDefault().ID;
        if (id != 0)
        {

            Console.WriteLine("buscando");
            respuesta = await http.GetFromJsonAsync<Data.Respuesta<ModeloDatos.Cuenta>>(url + "/" + id);
            cuenta = respuesta.Data;


        }
        Console.WriteLine("salio");

    }

    void TipoClienteChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();
        cuenta.IDAuxiliar = Convert.ToInt32(e.Value);

        Console.WriteLine("tipocliente: " + selectedString + "-" + e.ToString());
    }

  


}


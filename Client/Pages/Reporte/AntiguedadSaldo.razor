
@page "/AntiguedadSaldo"
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Linq
@using System.Threading
@using System.IO;
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.Extensions.Logging;
@using BlazorInputFile;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components;
@inject IJSRuntime JSRuntime

@inject HttpClient http
@inject NavigationManager navegar
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]
<h3>Antiguedad Saldo</h3>
<EditForm Model="@documento" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <div class="container-fluid">

        <div class="form-group row mb-1">
            <label class="col-sm-3">Cliente : </label>
            <div class="col-sm-9">
                @if (ListaAuxiliar != null)
                {

                    <select id="SearchStateClasificacionasasas" value="@documento.IdAuxiliar" @onchange="TipoClienteChange" class="form-control">

                        @foreach (var auxiliar in ListaAuxiliar)
                        {
                            <option value="@auxiliar.ID">@auxiliar.NombreCompleto</option>
                        }
                    </select>
                }
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">Cuenta : </label>
            <div class="col-sm-9">
                @if (ListaCuenta != null)
                {

                    <select id="SearchStateClasificacionasasas" value="@documento.IdCuenta" @onchange="CuentaChange" class="form-control">

                        @foreach (var cuenta in ListaCuenta)
                        {
                            <option value="@cuenta.ID">@cuenta.Descripcion</option>
                        }
                    </select>
                }
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">*Fecha Inicio : </label>
            <div class="col-sm-9">
                <InputDate class="form-control" @bind-Value="@documento.FechaInicio"></InputDate>
                <ValidationMessage For="@(()=>documento.FechaInicio)"></ValidationMessage>
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">*Fecha Fin: </label>
            <div class="col-sm-9">
                <InputDate class="form-control" @bind-Value="@documento.FechaFin"></InputDate>
                <ValidationMessage For="@(()=>documento.FechaFin)"></ValidationMessage>
            </div>

        </div>


        <div class="form-group row mb-1">
            <div class=" col-sm-12">
                <button class="btn btn-primary" type="submit">Guardar</button>
                <button type="button" class="btn btn-danger" @onclick="@Salir">Salir</button>

            </div>
        </div>

        @if (displayValidationErrorMessages)
        {
            <div class="col-md-4" style="margin-top:10px">
                <label>Validation Messages: </label>
                <ValidationSummary />
            </div>
        }
    </div>
    
</EditForm>
@if (displayUserAddedToDB)
{
    <div class="row bg-success text-white" style="margin-top:10px; height:40px">
        <label class="p-2">Revisando en la base de datos... </label>
    </div>
}
<table class="table">
    <thead>
        <tr>
            <th>Auxiliar</th>
            <th>Cuenta</th>
            <th>SaldoInicial</th>
            <th>Importe</th>
            <th>SaldoActual</th>
        </tr>
    </thead>
    <tbody>
        @if (ListaTipoDocumento != null && ListaTipoDocumento.Count > 0)
        {
            @foreach (var item in ListaTipoDocumento)
            {
                <tr>
                    <td>@item.Auxiliar</td>
                    <td>@item.Cuenta</td>
                    <td>@item.SaldoInicial</td>
                    <td>@item.Importe</td>
                    <td>@item.SaldoActual</td>


                </tr>

            }
        }
    </tbody>
</table>
@code {
    public string url = "/api/AntiguedadSaldo";
    public string urlCuenta = "/api/cuenta";
    public string urlTipo = "/api/TipoDocumento";
    public string urlAuxiliar = "/api/Auxiliar";
    [Parameter] public string InitialText { get; set; } = "Selecciona Tipo";
    [Parameter] public int id { get; set; }
    private ModeloDatos.AntiguedadSaldo documento = new ModeloDatos.AntiguedadSaldo();
    bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;

    List<ModeloDatos.AntiguedadSaldo> ListaTipoDocumento = new List<ModeloDatos.AntiguedadSaldo>();
    Data.Respuesta<List<ModeloDatos.AntiguedadSaldo>> respuestaTipoDocumento = new Data.Respuesta<List<ModeloDatos.AntiguedadSaldo>>();

    List<Auxiliar> ListaAuxiliar = new List<Auxiliar>();
    Data.Respuesta<List<Auxiliar>> respuestaAuxiliar = new Data.Respuesta<List<Auxiliar>>();

    List<Cuenta> ListaCuenta = new List<Cuenta>();
    Data.Respuesta<List<Cuenta>> respuestaCuenta = new Data.Respuesta<List<Cuenta>>();


    async Task Salir()
    {

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Desea Salir?");
        if (confirmed)
        {
            Console.WriteLine("Entro a la condicion salir");
            navegar.NavigateTo("/DocumentoView");
        }
        else
        {
            Console.WriteLine("no entro a la condicion");

        }
    }


     async Task Guardar()
    {



        respuestaTipoDocumento = await http.GetFromJsonAsync<Data.Respuesta<List<ModeloDatos.AntiguedadSaldo>>>(url + "/" + documento.FechaInicio.ToString("yyyy.MM.dd") + "/" + documento.FechaFin.ToString("yyyy.MM.dd") + "/" + documento.IdCuenta.ToString() + "/" + documento.IdAuxiliar.ToString());
        ListaTipoDocumento = respuestaTipoDocumento.Data;



    }

    private void HandleValidSubmit(EditContext context)
    {
        displayValidationErrorMessages = false;
        displayUserAddedToDB = true;
        Guardar();
    }
    private void HandleInvalidSubmit(EditContext context)
    {
        displayValidationErrorMessages = true;
        displayUserAddedToDB = false;
    }
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
    }
    void IDisposable.Dispose()
    {
        System.Diagnostics.Debug.WriteLine("Entra a dispose");
        // Unsubscribe from the event when our component is disposed
        navegar.LocationChanged -= LocationChanged; StateHasChanged();
    }

    protected override async Task OnInitializedAsync()

    {


        // Subscribe to the event
        navegar.LocationChanged += LocationChanged;

        documento = new ModeloDatos.AntiguedadSaldo();


        documento.FechaFin = DateTime.Now;
        documento.FechaInicio = DateTime.Now.AddMonths(-1);

        respuestaAuxiliar = await http.GetFromJsonAsync<Data.Respuesta<List<Auxiliar>>>(urlAuxiliar);
        ListaAuxiliar = respuestaAuxiliar.Data;
        if (ListaAuxiliar != null)
            if (ListaAuxiliar.Count > 0)
                documento.IdAuxiliar = ListaAuxiliar.FirstOrDefault().ID;

    }

    async Task TipoClienteChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();

        documento.IdAuxiliar = Convert.ToInt32(e.Value);
        respuestaCuenta = await http.GetFromJsonAsync<Data.Respuesta<List<Cuenta>>>(urlCuenta + "/" + e.Value.ToString());
        Console.WriteLine("tipocliente: " + selectedString + "-" + e.ToString());
        ListaCuenta = respuestaCuenta.Data;
        if (ListaCuenta != null)
            if (ListaCuenta.Count > 0)
                documento.IdCuenta = ListaCuenta.FirstOrDefault().ID;
    }


    void CuentaChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();
        documento.IdCuenta = Convert.ToInt32(e.Value);
        Console.WriteLine("cuenta ID: " + selectedString + "-" + e.ToString());
    }

}



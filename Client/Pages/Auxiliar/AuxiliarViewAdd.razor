@page "/ProspectoViewAdd"
@page "/ProspectoViewAdd/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Linq
@using System.Threading
@using System.IO;
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.Extensions.Logging;
@using BlazorInputFile;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components;
@inject IJSRuntime JSRuntime

@inject HttpClient http
@inject NavigationManager navegar
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<h3>Agregar nuevo </h3>
<EditForm Model="@prospecto" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <div class="container-fluid">

        <div class="form-group row mb-1">
            <label class="col-sm-3">*Nombre : </label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@prospecto.Nombre"></InputText>
                <ValidationMessage For="@(()=>prospecto.Nombre)"></ValidationMessage>
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">*Apellido Paterno : </label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@prospecto.ApellidoPaterno"></InputText>
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">Apellido Materno : </label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@prospecto.ApellidoMaterno"></InputText>
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">*RFC : </label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@prospecto.Rfc"></InputText>
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">*CodigoPostal : </label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@prospecto.CodigoPostal"></InputText>
            </div>

        </div>

        <div class="form-group row mb-1">
            <label class="col-sm-3">*Colonia : </label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@prospecto.Colonia"></InputText>
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">*Calle : </label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@prospecto.Calle"></InputText>
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">*Numero # : </label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@prospecto.Numero"></InputText>
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">*Telefono : </label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@prospecto.Telefono"></InputText>
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">Estatus : </label>
            <div class="col-sm-9">
                @if (ListaEstadosAuxiliar != null)
                {

                    <select id="SearchStateClasificacion" value="@prospecto.IDEstado" @onchange="TipoClienteChange" class="form-control">

                        @foreach (var estados in ListaEstadosAuxiliar)
                        {
                            <option value="@estados.ID">@estados.Descripcion</option>
                        }
                    </select>
                }
            </div>

        </div>
        <div class="form-group row mb-1">
            <label class="col-sm-3">Observaciones : </label>
            <div class="col-sm-9">
                <InputText class="form-control" @bind-Value="@prospecto.Observaciones"></InputText>
            </div>

        </div>

        <div class="form-group row mb-1">
            <label class="col-sm-3">Archivo : </label>
            <div class="col-sm-9">
                <InputFile OnChange="@CargarArchivo"></InputFile>
            </div>

        </div>
        <table class="table">
            @if (prospecto != null)
            {
                @foreach (var item in prospecto.AuxiliarDetalle)
                {
                    <tr>
                        <td>@item.ID</td>
                        <td>@item.Descripcion</td>

                        <td>
                            <a>
                                <button class="btn btn-danger" @onclick="()=>TrClickedAtIndex(item.Ruta)">Eliminar</button>
                                <button class="btn btn-success" @onclick="()=>DescargarArchivo(item.Ruta)">Descargar</button>
                            </a>
                        </td>


                    </tr>

                }
            }
        </table>
        <div class="form-group row mb-1">
            <div class=" col-sm-12">
                <button class="btn btn-primary" type="submit">Guardar</button>
                <button type="button" class="btn btn-danger" @onclick="@Salir">Salir</button>

            </div>
        </div>

        @if (displayValidationErrorMessages)
        {
            <div class="col-md-4" style="margin-top:10px">
                <label>Validation Messages: </label>
                <ValidationSummary />
            </div>
        }
    </div>
</EditForm>
@if (displayUserAddedToDB)
{
    <div class="row bg-success text-white" style="margin-top:10px; height:40px">
        <label class="p-2">Guardando en la base de datos... </label>
    </div>
}

@code {

    public string url = "/api/Auxiliar";
    public string urlTipo = "/api/AuxiliarEstados";
    [Parameter] public string InitialText { get; set; } = "Selecciona Tipo";
    [Parameter] public int id { get; set; }
    private ModeloDatos.Auxiliar prospecto = new ModeloDatos.Auxiliar();
    Data.Respuesta<ModeloDatos.Auxiliar> respuesta = new Data.Respuesta<ModeloDatos.Auxiliar>();
    bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;

    List<AuxiliarEstados> ListaEstadosAuxiliar = new List<AuxiliarEstados>();
    Data.Respuesta<List<AuxiliarEstados>> respuestEstadoAuxiliar = new Data.Respuesta<List<AuxiliarEstados>>();

    async Task DescargarArchivo(string index)
    {
        Console.WriteLine($"tr clicked at index {index}!");


        var archivo = prospecto.AuxiliarDetalle.FirstOrDefault(C => C.Ruta == index);
        if (archivo != null)
            await JSRuntime.InvokeAsync<object>("FileSaveAs", archivo.Archivo, archivo.Descripcion);


    }
    public void TrClickedAtIndex(string index)
    {
        Console.WriteLine($"tr clicked at index {index}!");
        var archivo = prospecto.AuxiliarDetalle.FirstOrDefault(C => C.Ruta == index);
        if (archivo.ID > 0)
            prospecto.AuxiliarDetalleEliminado.Add(archivo.ID);


        prospecto.AuxiliarDetalle.Remove(prospecto.AuxiliarDetalle.FirstOrDefault(C => C.Ruta == index));
    }
    async Task Salir()
    {

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Desea Salir?");
        if (confirmed)
        {
            Console.WriteLine("Entro a la condicion salir");
            navegar.NavigateTo("/ProspectoView");
        }
        else
        {
            Console.WriteLine("no entro a la condicion");

        }
    }

    async Task CargarArchivo(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            prospecto.AuxiliarDetalle.Add(new AuxiliarDetalle() { Archivo = ms.ToArray(), Descripcion = file.Name, Ruta = file.Type });

        }
    }

    private async Task Guardar()
    {



        Console.WriteLine("Entro");
        if (id != 0)
        {

            var orespuesta = await http.PutAsJsonAsync<ModeloDatos.Auxiliar>(url, prospecto);
            respuesta = orespuesta.Content.ReadFromJsonAsync<Data.Respuesta<ModeloDatos.Auxiliar>>().Result;
        }
        else
        {
            var orespuesta = await http.PostAsJsonAsync<ModeloDatos.Auxiliar>(url, prospecto);
            respuesta = orespuesta.Content.ReadFromJsonAsync<Data.Respuesta<ModeloDatos.Auxiliar>>().Result;
            Console.WriteLine("Entro guardar");
        }

        navegar.NavigateTo("/ProspectoView");

    }

    private void HandleValidSubmit(EditContext context)
    {
        displayValidationErrorMessages = false;
        displayUserAddedToDB = true;
        Guardar();
    }
    private void HandleInvalidSubmit(EditContext context)
    {
        displayValidationErrorMessages = true;
        displayUserAddedToDB = false;
    }
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
    }
    void IDisposable.Dispose()
    {
        System.Diagnostics.Debug.WriteLine("Entra a dispose");
        // Unsubscribe from the event when our component is disposed
        navegar.LocationChanged -= LocationChanged; StateHasChanged();
    }

    protected override async Task OnInitializedAsync()

    {
        // Subscribe to the event
        navegar.LocationChanged += LocationChanged;



        respuestEstadoAuxiliar = await http.GetFromJsonAsync<Data.Respuesta<List<AuxiliarEstados>>>(urlTipo);
        ListaEstadosAuxiliar = respuestEstadoAuxiliar.Data;
        prospecto.IDEstado = 1;

        if (id != 0)
        {


            respuesta = await http.GetFromJsonAsync<Data.Respuesta<ModeloDatos.Auxiliar>>(url + "/" + id);
            prospecto = respuesta.Data;


        }
        Console.WriteLine("salio");

    }

    void TipoClienteChange(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();
        prospecto.IDEstado = Convert.ToInt32(e.Value);

        Console.WriteLine("tipocliente: " + selectedString);
    }




}
